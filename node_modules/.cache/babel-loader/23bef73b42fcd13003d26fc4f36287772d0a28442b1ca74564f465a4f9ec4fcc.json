{"ast":null,"code":"var _jsxFileName = \"/home/chernandez148/personal_projects/portfoliov_5/src/components/ParticleCanvas/ParticleCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticleCanvas = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const particles = [];\n    class Particle {\n      constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.size = Math.random() * 5 + 2;\n        this.speedX = Math.random() * 0.5 - 0.1;\n        this.opacity = 0;\n        this.targetOpacity = Math.random() * 0.4 + 0.1; // Random opacity target between 0.1 and 0.5\n\n        this.update = () => {\n          this.x += this.speedX;\n          this.y -= 0.5;\n          if (this.x > canvas.width) {\n            this.x = 0;\n          } else if (this.x < 0) {\n            this.x = canvas.width;\n          }\n          if (this.y > canvas.height) {\n            this.y = 0;\n          } else if (this.y < 0) {\n            this.y = canvas.height;\n          }\n          if (this.opacity < this.targetOpacity) {\n            this.opacity += 0.005;\n          } else if (this.opacity > this.targetOpacity) {\n            this.opacity -= 0.005;\n          }\n        };\n        this.draw = () => {\n          ctx.fillStyle = `rgba(0, 0, 0, ${this.opacity})`;\n          ctx.beginPath();\n          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n          ctx.fill();\n        };\n      }\n    }\n    function createParticles() {\n      particles.length = 0; // Clear existing particles\n      for (let i = 0; i < 10; i++) {\n        const x = Math.random() * canvas.width;\n        const y = Math.random() * canvas.height;\n        particles.push(new Particle(x, y));\n      }\n    }\n    function animate() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      particles.forEach(particle => {\n        particle.update();\n        particle.draw();\n      });\n      requestAnimationFrame(animate);\n    }\n\n    // Function to update canvas dimensions\n    const updateCanvasDimensions = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight * 0.5; // Set canvas height to 50% of screen height\n      createParticles(); // Call createParticles whenever dimensions change\n    };\n\n    // Initial canvas setup\n    updateCanvasDimensions();\n\n    // Attach resize event listener\n    window.addEventListener('resize', updateCanvasDimensions);\n    animate();\n    return () => {\n      // Clean up the resize event listener\n      window.removeEventListener('resize', updateCanvasDimensions);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      width: '100%',\n      height: '50vh'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 12\n  }, this);\n};\n_s(ParticleCanvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = ParticleCanvas;\nexport default ParticleCanvas;\nvar _c;\n$RefreshReg$(_c, \"ParticleCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","ParticleCanvas","_s","canvasRef","canvas","current","ctx","getContext","particles","Particle","constructor","x","y","size","Math","random","speedX","opacity","targetOpacity","update","width","height","draw","fillStyle","beginPath","arc","PI","fill","createParticles","length","i","push","animate","clearRect","forEach","particle","requestAnimationFrame","updateCanvasDimensions","window","innerWidth","innerHeight","addEventListener","removeEventListener","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/chernandez148/personal_projects/portfoliov_5/src/components/ParticleCanvas/ParticleCanvas.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst ParticleCanvas = () => {\n    const canvasRef = useRef(null);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n\n        const particles = [];\n\n        class Particle {\n            constructor(x, y) {\n                this.x = x;\n                this.y = y;\n                this.size = Math.random() * 5 + 2;\n                this.speedX = Math.random() * 0.5 - 0.1;\n                this.opacity = 0;\n                this.targetOpacity = Math.random() * 0.4 + 0.1; // Random opacity target between 0.1 and 0.5\n\n                this.update = () => {\n                    this.x += this.speedX;\n                    this.y -= 0.5;\n\n                    if (this.x > canvas.width) {\n                        this.x = 0;\n                    } else if (this.x < 0) {\n                        this.x = canvas.width;\n                    }\n\n                    if (this.y > canvas.height) {\n                        this.y = 0;\n                    } else if (this.y < 0) {\n                        this.y = canvas.height;\n                    }\n\n                    if (this.opacity < this.targetOpacity) {\n                        this.opacity += 0.005;\n                    } else if (this.opacity > this.targetOpacity) {\n                        this.opacity -= 0.005;\n                    }\n                };\n\n                this.draw = () => {\n                    ctx.fillStyle = `rgba(0, 0, 0, ${this.opacity})`;\n                    ctx.beginPath();\n                    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n                    ctx.fill();\n                };\n            }\n        }\n\n        function createParticles() {\n            particles.length = 0; // Clear existing particles\n            for (let i = 0; i < 10; i++) {\n                const x = Math.random() * canvas.width;\n                const y = Math.random() * canvas.height;\n                particles.push(new Particle(x, y));\n            }\n        }\n\n        function animate() {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n            particles.forEach((particle) => {\n                particle.update();\n                particle.draw();\n            });\n\n            requestAnimationFrame(animate);\n        }\n\n        // Function to update canvas dimensions\n        const updateCanvasDimensions = () => {\n            canvas.width = window.innerWidth;\n            canvas.height = window.innerHeight * 0.5; // Set canvas height to 50% of screen height\n            createParticles(); // Call createParticles whenever dimensions change\n        };\n\n        // Initial canvas setup\n        updateCanvasDimensions();\n\n        // Attach resize event listener\n        window.addEventListener('resize', updateCanvasDimensions);\n\n        animate();\n\n        return () => {\n            // Clean up the resize event listener\n            window.removeEventListener('resize', updateCanvasDimensions);\n        };\n    }, []);\n\n    return <canvas ref={canvasRef} style={{ width: '100%', height: '50vh' }} />;\n};\n\nexport default ParticleCanvas;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}